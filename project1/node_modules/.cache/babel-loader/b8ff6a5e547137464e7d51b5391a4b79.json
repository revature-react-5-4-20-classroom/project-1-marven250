{"ast":null,"code":"import axios from \"axios\";\nimport { User } from \"../Models/user\";\nimport { Reimbursement } from \"../Models/Reimbursement\"; // For project work, take note that axios interprets non-200s responses statuses as errors.\n// This means you can handle auth problems using try-catch.\n//We can create a client with config for convenience, then call our methods\n// on that client instead of on axios directly.  This lets up set up configuration\n// without repeating ourselves\n\nconst infoClient = axios.create({\n  baseURL: \"http://localhost:5000\",\n  // If you don't have the following line, your login won't work!\n  withCredentials: true\n}); //Library-express is running on my EC2 with public IP 18.232.125.207\n// export async function getAllBooks() {\n//   const response = await libraryClient.get(\"/books\");\n//   return response.data.map((bookObj) => {\n//     const { id, title, author, yearPublished, wordCount } = bookObj;\n//     // return new Book(id, title, author, yearPublished, wordCount);\n//   });\n// }\n\nexport async function patchReimbursement(id, status) {\n  const response = await infoClient.patch(\"/reimbursements\", {\n    id: id,\n    status: status\n  });\n  console.log(\"this is solved reimbursement\", response.data);\n}\nexport async function getAllUsers() {\n  const response = await infoClient.get(\"/users\");\n  console.log(\"this is backend users:\", response.data);\n  return response.data.map(userObj => {\n    const {\n      id,\n      username,\n      firstname,\n      lastname,\n      password,\n      email,\n      role\n    } = userObj;\n    return new User(id, username, firstname, lastname, password, email, role);\n  });\n}\nexport async function submitReimbursement(amount, description, type) {\n  try {\n    const response = await infoClient.post(\"/reimbursements\", {\n      amount,\n      description,\n      type\n    }); // console.log(\"reimbursmeents req response:\", response);\n\n    return response.data; // return new Reimbursement(\n    //   response.dataauthor,\n    //   response.dataamount,\n    //   response.datadateSubmitted,\n    //   response.datadateResolved,\n    //   response.datadescription,\n    //   response.dataresolver,\n    //   response.datastatus,\n    //   response.datartype\n    // );\n  } catch (e) {\n    console.error(e.message);\n  }\n}\nexport async function patchUser(id, firstname, lastname, password, email) {\n  //console.log(\"in patch function\", sessionStorage.getItem(\"user\"));\n  if (id === 0) id = JSON.parse(sessionStorage.getItem(\"user\")).id;\n  let request = {\n    id: id,\n    firstname: firstname,\n    lastname: lastname,\n    password: password,\n    email: email\n  };\n  const response = await infoClient.patch(\"/users\", request);\n  return new User(response.data.id, response.data.username, response.data.firstname, response.data.lastname, response.data.password, response.data.email, response.data.role_id); //console.log(response);\n}\nexport async function getCurrentUserReimbursements() {\n  const response = await infoClient.get(`/reimbursements/author/userId/${JSON.parse(sessionStorage.getItem(\"user\")).id}`);\n  return response.data.map(currentUserReimbursementObj => {\n    const {\n      id,\n      author,\n      amount,\n      dateresolved,\n      datesubmitted,\n      description,\n      resolver,\n      rtype,\n      status\n    } = currentUserReimbursementObj;\n    return new Reimbursement(id, author, amount, datesubmitted, dateresolved, description, resolver, status, rtype);\n  });\n}\nexport async function getAUserReimbursement(identify) {\n  const response = await infoClient.get(`/reimbursements/author/userId/${identify}`);\n  return response.data.map(currentUserReimbursementObj => {\n    const {\n      id,\n      author,\n      amount,\n      dateresolved,\n      datesubmitted,\n      description,\n      resolver,\n      rtype,\n      status\n    } = currentUserReimbursementObj;\n    return new Reimbursement(id, author, amount, datesubmitted, dateresolved, description, resolver, status, rtype);\n  });\n}\nexport async function getPendingReimbursements() {\n  const response = await infoClient.get(\"/reimbursements/status/1\");\n  return response.data.map(pendingReimbursementObj => {\n    const {\n      id,\n      author,\n      amount,\n      dateresolved,\n      datesubmitted,\n      description,\n      resolver,\n      rtype,\n      status\n    } = pendingReimbursementObj;\n    return new Reimbursement(id, author, amount, datesubmitted, dateresolved, description, resolver, status, rtype);\n  });\n}\nexport async function getApprovedReimbursements() {\n  const response = await infoClient.get(\"/reimbursements/status/2\");\n  return response.data.map(approvedReimbursementObj => {\n    const {\n      id,\n      author,\n      amount,\n      dateresolved,\n      datesubmitted,\n      description,\n      resolver,\n      rtype,\n      status\n    } = approvedReimbursementObj;\n    return new Reimbursement(id, author, amount, datesubmitted, dateresolved, description, resolver, status, rtype);\n  });\n}\nexport async function getDeclinedReimbursements() {\n  const response = await infoClient.get(\"/reimbursements/status/3\");\n  return response.data.map(declinedReimbursementObj => {\n    const {\n      id,\n      author,\n      amount,\n      dateresolved,\n      datesubmitted,\n      description,\n      resolver,\n      rtype,\n      status\n    } = declinedReimbursementObj;\n    return new Reimbursement(id, author, amount, datesubmitted, dateresolved, description, resolver, status, rtype);\n  });\n}\nexport async function login(un, pw) {\n  // console.log(\"in login function\");\n  try {\n    const response = await infoClient.post(\"/login\", {\n      username: un,\n      password: pw\n    }); // console.log(\"successfully logged in!!\");\n\n    const {\n      id,\n      username,\n      password,\n      email,\n      role,\n      firstname,\n      lastname\n    } = response.data;\n    console.log(\"This si our logged in user\", response.data); // console.log(\"extracted values:\", email, role, id, username);\n\n    return new User(id, username, firstname, lastname, password, email, role);\n  } catch (e) {\n    if (e.response.status === 401) {\n      throw new Error(`Failed to authenticate ${un}`);\n    } else {\n      // We could throw a different custom error, this exposes a little too much to the user.\n      throw e;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/MaRvE/Desktop/RevatureTraining/project-1-marven250/project1/src/api/infoClient.tsx"],"names":["axios","User","Reimbursement","infoClient","create","baseURL","withCredentials","patchReimbursement","id","status","response","patch","console","log","data","getAllUsers","get","map","userObj","username","firstname","lastname","password","email","role","submitReimbursement","amount","description","type","post","e","error","message","patchUser","JSON","parse","sessionStorage","getItem","request","role_id","getCurrentUserReimbursements","currentUserReimbursementObj","author","dateresolved","datesubmitted","resolver","rtype","getAUserReimbursement","identify","getPendingReimbursements","pendingReimbursementObj","getApprovedReimbursements","approvedReimbursementObj","getDeclinedReimbursements","declinedReimbursementObj","login","un","pw","Error"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { User } from \"../Models/user\";\r\nimport { Reimbursement } from \"../Models/Reimbursement\";\r\n\r\n// For project work, take note that axios interprets non-200s responses statuses as errors.\r\n// This means you can handle auth problems using try-catch.\r\n\r\n//We can create a client with config for convenience, then call our methods\r\n// on that client instead of on axios directly.  This lets up set up configuration\r\n// without repeating ourselves\r\nconst infoClient = axios.create({\r\n  baseURL: \"http://localhost:5000\",\r\n  // If you don't have the following line, your login won't work!\r\n  withCredentials: true,\r\n});\r\n\r\n//Library-express is running on my EC2 with public IP 18.232.125.207\r\n// export async function getAllBooks() {\r\n//   const response = await libraryClient.get(\"/books\");\r\n//   return response.data.map((bookObj) => {\r\n//     const { id, title, author, yearPublished, wordCount } = bookObj;\r\n//     // return new Book(id, title, author, yearPublished, wordCount);\r\n//   });\r\n// }\r\n\r\nexport async function patchReimbursement(id, status) {\r\n  const response = await infoClient.patch(\"/reimbursements\", {\r\n    id: id,\r\n    status: status,\r\n  });\r\n  console.log(\"this is solved reimbursement\", response.data);\r\n}\r\n\r\nexport async function getAllUsers() {\r\n  const response = await infoClient.get(\"/users\");\r\n  console.log(\"this is backend users:\", response.data);\r\n  return response.data.map((userObj) => {\r\n    const {\r\n      id,\r\n      username,\r\n      firstname,\r\n      lastname,\r\n      password,\r\n      email,\r\n      role,\r\n    } = userObj;\r\n    return new User(id, username, firstname, lastname, password, email, role);\r\n  });\r\n}\r\n\r\nexport async function submitReimbursement(amount, description, type) {\r\n  try {\r\n    const response = await infoClient.post(\"/reimbursements\", {\r\n      amount,\r\n      description,\r\n      type,\r\n    });\r\n    // console.log(\"reimbursmeents req response:\", response);\r\n    return response.data;\r\n    // return new Reimbursement(\r\n    //   response.dataauthor,\r\n    //   response.dataamount,\r\n    //   response.datadateSubmitted,\r\n    //   response.datadateResolved,\r\n    //   response.datadescription,\r\n    //   response.dataresolver,\r\n    //   response.datastatus,\r\n    //   response.datartype\r\n    // );\r\n  } catch (e) {\r\n    console.error(e.message);\r\n  }\r\n}\r\n\r\nexport async function patchUser(id, firstname, lastname, password, email) {\r\n  //console.log(\"in patch function\", sessionStorage.getItem(\"user\"));\r\n  if (id === 0) id = JSON.parse(sessionStorage.getItem(\"user\")).id;\r\n  let request = {\r\n    id: id,\r\n    firstname: firstname,\r\n    lastname: lastname,\r\n    password: password,\r\n    email: email,\r\n  };\r\n  const response = await infoClient.patch(\"/users\", request);\r\n\r\n  return new User(\r\n    response.data.id,\r\n    response.data.username,\r\n    response.data.firstname,\r\n    response.data.lastname,\r\n    response.data.password,\r\n    response.data.email,\r\n    response.data.role_id\r\n  );\r\n  //console.log(response);\r\n}\r\n\r\nexport async function getCurrentUserReimbursements() {\r\n  const response = await infoClient.get(\r\n    `/reimbursements/author/userId/${\r\n      JSON.parse(sessionStorage.getItem(\"user\")).id\r\n    }`\r\n  );\r\n  return response.data.map((currentUserReimbursementObj) => {\r\n    const {\r\n      id,\r\n      author,\r\n      amount,\r\n      dateresolved,\r\n      datesubmitted,\r\n      description,\r\n      resolver,\r\n      rtype,\r\n      status,\r\n    } = currentUserReimbursementObj;\r\n    return new Reimbursement(\r\n      id,\r\n      author,\r\n      amount,\r\n      datesubmitted,\r\n      dateresolved,\r\n      description,\r\n      resolver,\r\n      status,\r\n      rtype\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getAUserReimbursement(identify) {\r\n  const response = await infoClient.get(\r\n    `/reimbursements/author/userId/${identify}`\r\n  );\r\n  return response.data.map((currentUserReimbursementObj) => {\r\n    const {\r\n      id,\r\n      author,\r\n      amount,\r\n      dateresolved,\r\n      datesubmitted,\r\n      description,\r\n      resolver,\r\n      rtype,\r\n      status,\r\n    } = currentUserReimbursementObj;\r\n    return new Reimbursement(\r\n      id,\r\n      author,\r\n      amount,\r\n      datesubmitted,\r\n      dateresolved,\r\n      description,\r\n      resolver,\r\n      status,\r\n      rtype\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getPendingReimbursements() {\r\n  const response = await infoClient.get(\"/reimbursements/status/1\");\r\n  return response.data.map((pendingReimbursementObj) => {\r\n    const {\r\n      id,\r\n      author,\r\n      amount,\r\n      dateresolved,\r\n      datesubmitted,\r\n      description,\r\n      resolver,\r\n      rtype,\r\n      status,\r\n    } = pendingReimbursementObj;\r\n    return new Reimbursement(\r\n      id,\r\n      author,\r\n      amount,\r\n      datesubmitted,\r\n      dateresolved,\r\n      description,\r\n      resolver,\r\n      status,\r\n      rtype\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getApprovedReimbursements() {\r\n  const response = await infoClient.get(\"/reimbursements/status/2\");\r\n  return response.data.map((approvedReimbursementObj) => {\r\n    const {\r\n      id,\r\n      author,\r\n      amount,\r\n      dateresolved,\r\n      datesubmitted,\r\n      description,\r\n      resolver,\r\n      rtype,\r\n      status,\r\n    } = approvedReimbursementObj;\r\n    return new Reimbursement(\r\n      id,\r\n      author,\r\n      amount,\r\n      datesubmitted,\r\n      dateresolved,\r\n      description,\r\n      resolver,\r\n      status,\r\n      rtype\r\n    );\r\n  });\r\n}\r\n\r\nexport async function getDeclinedReimbursements() {\r\n  const response = await infoClient.get(\"/reimbursements/status/3\");\r\n  return response.data.map((declinedReimbursementObj) => {\r\n    const {\r\n      id,\r\n      author,\r\n      amount,\r\n      dateresolved,\r\n      datesubmitted,\r\n      description,\r\n      resolver,\r\n      rtype,\r\n      status,\r\n    } = declinedReimbursementObj;\r\n    return new Reimbursement(\r\n      id,\r\n      author,\r\n      amount,\r\n      datesubmitted,\r\n      dateresolved,\r\n      description,\r\n      resolver,\r\n      status,\r\n      rtype\r\n    );\r\n  });\r\n}\r\n\r\nexport async function login(un, pw) {\r\n  // console.log(\"in login function\");\r\n  try {\r\n    const response = await infoClient.post(\"/login\", {\r\n      username: un,\r\n      password: pw,\r\n    });\r\n    // console.log(\"successfully logged in!!\");\r\n    const {\r\n      id,\r\n      username,\r\n      password,\r\n      email,\r\n      role,\r\n      firstname,\r\n      lastname,\r\n    } = response.data;\r\n\r\n    console.log(\"This si our logged in user\", response.data);\r\n    // console.log(\"extracted values:\", email, role, id, username);\r\n    return new User(id, username, firstname, lastname, password, email, role);\r\n  } catch (e) {\r\n    if (e.response.status === 401) {\r\n      throw new Error(`Failed to authenticate ${un}`);\r\n    } else {\r\n      // We could throw a different custom error, this exposes a little too much to the user.\r\n      throw e;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}